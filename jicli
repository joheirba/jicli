#!/bin/bash
# vim:ts=4:sw=4:noet
snme="jicli"        # scriptname
vrsn="v0.1b"        # version
#
# JiCli - Jojo's IDrive CLI - Copyright (C) 2022 Joris Heirbaut - GPLv3
#
# JiCli is free software: you can redistribute it and / or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#    
# This program is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#    
# You should have received a copy of the GNU General Public License along with this program
# If not, see www.gnu.org/licenses/gpl-3.0
#
# History
# v0.1a - Jun 2022 - Joris Heirbaut - Initial version (untested !)
# v0.1b - Jun 2022 - Joris Heirbaut - Initial version (untested !)

# Wishlist
# - utility.pl RESTARTIDRIVESERVICES --> restartIdriveServices()
# - utility.pl CDP... --> cdpWatch()
# - utility.pl VERIFYBACKUPSET status:string time:hh:mm:ss --> verifyBackupset
# - utility.pl RECALCULATEBACKUPSETSIZE
# - utility.pl DISPCRONREBOOTCMD
# Call stack:
# - idevsutil_dedup --utf8-cmd=...utf8.txt.1 > /dev/null 2>doBackuperror.txt_1
# - Backup_Script.pl SCHEDULED joheirba@gmail.com
#
# Tests
# $ /opt/IDrive/scripts/Idrivelib/dependencies/python/dashboard stop --> ok
# $ /opt/IDrive/scripts/Idrivelib/dependencies/python/dashboard start --> ok
# $ perl -e "print pack("u",qw([\"evswebireland13.idrive.com\"]))" >../tmp
#   --> >6R)E=G-W96)I<F5L86YD,3,N:61R:79E+F-O;2)=
# $ /opt/IDrive/scripts/Idrivelib/dependencies/python/dashboard 9 ../tmp
#   --> {"DATA": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tree message=\"SUCCESS\" 
#        totalquota=\"5368709120000\"\n    usedquota=\"1033855153193\" filecount=\"121196\" 
#        hlimit=\"n\"/>\n", "STATUS": "SUCCESS"}
# $ cat IDENPWD | perl -e 'print(unpack("u",substr(<>,3)));'

#
# makeRequest(i, [data]) == python/dashboard i <<< pack("u", [data])
#  login:      1 [user-email]
#  config:     8 [$webAPI, lc($configType),$encKey]
#  getserver: 12 
#  getusers:   2 [$uname]
#  gettoken:   10
#  sendmail:    6 [$to,$subject,$content]
#  updateuser:  7 [$device_name, $uniqueID, $enabled, $encodedOS, $currentVersion]
#  updateLog:   15 [$utf8File] 1
#  checkUpdate: 4 [$appType."ForLinux",$trimmedVersion]


# From https://man7.org/linux/man-pages/man4/console_codes.4.html
# \eM    Reverse linefeed
# \e[xA  Move cursor x lines up			tput cuu N
# \e[xB  Move cursor x lines down		tput cud N
# \e[1J  Erase display from start to cursor
# \e[2J  Erase display 
# \e[3J  Erase display and scroll buffer
# \e[K   Erase to end of line			tput el
# \e[1K  Erase from start of line to cursor
# \e[xL  Insert x lines				tput il N
# \e[7m  Reverse video				tput rev
# \e[27m Reverse video off

# defaults
didv=""     # IDrive directory
dbse=""     # IDrive base user directory
dbup=""     # IDrive backup status directory
iusr=""     # IDrive user
lusr=""     # Local  user
cmd=""      # Command to execute

# parse commandline
oh=false # option-help
od=false # option-debug
ov=false # option-verbose
on=""

while getopts "d:hl:i:n:u:v" opt
do
  case "$opt" in
    d) dbse="$OPTARG" ;;
    h) oh=true ;;
    l) lusr="$OPTARG" ;;
    i) didv="$OPTARG" ;;
    n) on="$OPTARG" ;;
    u) iusr="$OPTARG" ;;
    v) $ov && od=true || ov=true ;;
  esac
done
shift $((OPTIND-1))
cmd="$1"

# debug: show commandline
$od && echo "$0 $@" >&2
#$ov && echo "verbose" >&2

# check values
[[ -z "$didv" ]] && didv="${IDRIVE_DIR:-/opt/IDrive}"           # IDrive directory
[[ -z "$iusr" ]] && iusr="${IDRIVE_USR}"                        # IDrive user
[[ -z "$lusr" ]] && lusr=$(id -u -n)                            # Local  user
[[ -z "$dbup" ]] && dbse="$didv/idriveIt/user_profile/$lusr/$iusr"
dbup="$dbse/Backup/DefaultBackupSet"

[[ -d "$didv" ]] || { echo "error: IDrive directory $didv not found." ; oh=true ; }
[[ -d "$dbup" ]] || { echo "error: Backup directory $dbup not found." ; oh=true ; }

# usage
function usage() {
  # don't replace tabs by spaces in following lines !!!
  sed -e "s/jicli/$n/g" <<-EOFHELP
	JiCli $vrsn (untested alpha) - Jojo's IDrive CLI - Copyright (C)2022 Joris Heirbaut GPLv3

	JiCli is free software: you can redistribute it and / or modify it under the terms of the
	GNU General Public License as published by the Free Software Foundation, either version 3
	of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful,	 but WITHOUT ANY WARRANTY
	without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License along with this program
	If not, see www.gnu.org/licenses/gpl-3.0
	
	usage: $snme [-hvv] [-d <udir>] [-i <idir>] [-u <usr>] [-l <lusr>] [<command> [<arg>...]]
	flags:
	  -h    show help and exit
	  -v    be verbose
	  -vv   be very verbose (debug)
	  -d    set idrive user directory (default /<idir>/idriveIt/user_profile/<lusr>/<usr>)
	  -i    set idrive directory (default: /opt/IDrive)
	  -u    set idrive user (default $IDRIVE_USR, ex. -u me@mymail.be)
	  -l    set local  user (default $USER, ex. -l root or -l jojo :-)
	commands:
	  pgs|progress              show backup progress (default)
	  enc|encode [<data>]       encode data or stdin
	  dec|decode [<data>]       decode data or stdin
	  set [<var> [<value>]]...  set configuration var(s) to value(s)
	  get [<var>] [<var>]...    get configuration var(s)
	examples:
	  export IDRIVE_USR=me@mymail.be        set idrive username
	  cat CONFIGURATION_FILE | jicli dec    decode and show configuration file
	  jicli set bwthrottle 50               set BWTHROTTLE to 50 in configuration file 
	  jicli                                 show backup progress
	EOFHELP
}
if $oh
then
  usage
  exit
fi

#==============================================================================
# Functions
#==============================================================================
# Encode/decode idrive configuration files
function ienc(){
    $od && echo "$0 $@" >&2
    [[ -z "$1" ]] && enc=$(cat) || enc="$1"
    $od && echo "Input=$enc" >&2
    enc=$(echo -n "$enc" | base64)
    $od && echo "Bse64=$enc" >&2
    shl=$((${#enc}/4))
    swp="${enc:$((shl*3)):shl}${enc:$shl:$((shl*2))}${enc:0:$shl}${enc:$((shl*4))}"
    $od && echo "Swap =$swp" >&2
    echo -n "$swp"
}
function idec(){
    $od && echo "$0 $@" >&2
    [[ -z "$1" ]] && enc="$(cat)" || enc="$1"
    #$od && echo "Input=$enc" >&2
    shl=$((${#enc}/4))
    swp="${enc:$((shl*3)):shl}${enc:$shl:$((shl*2))}${enc:0:$shl}${enc:$((shl*4))}"
    #$od && echo "Swap =$swp" >&2
    echo -n "$swp" | base64 -d
}
function iset(){
    local ot=false
    local cfg="$dbse/CONFIGURATION_FILE"

    # set or get ?
    if [[ "$1" == "get" ]] 
    then
        shift
        ot=true
        $od && echo "iget $@" >&2
    else
        $od && echo "iset $@" >&2
    fi

    # find configuration file
    $od && echo "$cfg" >&2
    $ov && ! [[ -f "$cfg" ]] && echo "$cfg does not exist !" >&2
    [[ -f "$cfg" ]] || return 2

    dta="$(idec < "$cfg")"
    if [[ $# -eq 0 ]] 
    then
        echo "$dta"
    elif $ot || [[ $# -eq 1 ]] 
    then
        $od && echo "$dta" >&2
        while [[ $# -gt 0 ]]
        do
            var="${1^^}"
            shift

            val=$(echo -n "$dta" | sed -ne "s/^.*\"$var\": *{\"VALUE\": *\"\([^\"]*\).*$/\1/p")
            $ov && [[ -z "$val" ]] && echo "iget value not found for $var"
            $od && [[ -z "$val" ]] && echo "iget get $var=$val"
            echo "$val"
        done
    else
        while [[ $# -ge 2 ]]
        do
          var="${1^^}"
          val="$2"
          shift 2
    
          dta="$(echo -n "$dta" | sed -e "s/\(\"$var\": *{\"VALUE\": *\)[^}]*}/\1\"$val\"}/g")"
          $od && echo "$dta" >&2
        done
        $od || ienc "$dta" > $cfg
    fi
}

# getquota [-l] <transferred>
((qua_sec=10))             # wait 10 seconds before updating quota (for faster startup)
((qua_nxt=200*1024*1024))  # or transfer at least 200Mb before updating quota
qua_txt="wait"	   		   # quota text
function getquota(){
    # Lazy: only get quota every 60seconds and 1GB of data
    if [[ "$1" == "-l" ]]
    then
      shift
      ((qua_tft += ${1:-0} ))
      ((SECONDS > qua_sec)) || return 1
	  ((qua_tft > qua_nxt)) || ((qua_sec==10)) || return 2
    else
      ((qua_tft += ${1:-0} ))
      ((SECONDS > qua_sec)) || return 1
    fi

	# Clear quota
    mv -f "$dbse"/.quota.txt "$dbse"/.quota.old 2> /dev/null
	qua_txt=""

    # Get quota
    $didv/scripts/utility.pl GETQUOTA < /dev/null &
    # faster: /opt/IDrive/scripts/IDrivelib/dependencies/python/dashboard 9 16553067079

    # Update lazy counters
    ((qua_sec=SECONDS+120))     # check again after at least 2 minutes
    ((qua_nxt=200*1024*1024))   # check again after at least 200Mb
    ((qua_tft=0))
}

#==============================================================================
# Execute command
#==============================================================================
case "${cmd,,}" in
    "enc"|"encode"  ) shift ; ienc "$@" ; exit ;;
    "dec"|"decode"  ) shift ; idec "$@" ; exit ;;
    "set"           ) shift ; iset "$@" ; exit ;;
    "get"           ) shift ; iset get "$@" ; exit ;;
    "pgs"|"progress") shift ;;
    ""              ) ;;
    *               ) echo "Error: unknown command $cmd" ; usage ; exit ;;
esac

#==============================================================================
# Show Backup Progress
#==============================================================================
# Debugging tools
function printqn2err () { printf "%q\n" "$@" >&2 ; } 
$od && echod=printqn2err || echod=:

# Usefull terminal codes from tput (with fallback escape sequeces)
$echod "tcc_rev:${tcc_rev:=$(tput rev  	|| echo -e "\e[7m")}"     	# reverse video
$echod "tcc_sgr:${tcc_sgr:=$(tput sgr0 	|| echo -e "\e[m")}"    	# normal  video
$echod "tcc_el :${tcc_el:=$(tput el	  	|| echo -e "\e[K")}"       	# erase to end-of-line
#$echod "tcc_sc :${tcc_sc:=$(tput sc	  	|| echo -e "\e7")}"      	# save cursor position
#$echod "tcc_rc :${tcc_rc:=$(tput rc	  	|| echo -e "\e8")}"      	# restore cursor position
$echod "tcc_il :${tcc_il:=$(tput il 1	|| echo -e "\e[1L")}"     	# insert 1 lines
$echod "tcc_cuu:${tcc_cuu:=$(tput cuu 1 || echo -e "\e[1A")}"   	# cursor up 1 lines
$echod "tcc_cud:${tcc_cud:=$(tput cud 1 || echo -e "\e[1B")}"   	# cursor down 1 lines
#$echod "tcc_cup:${tcc_cup:=$(tput cup 0 1 || echo -e "\e[1;2H")}"  	# cursor position 1,2

# Prepare terminal and exit trap
tty=$(tty)
tto=$(stty -g)
tput rmam          # no wrapping on terminal
tput civis         # cursor invisible
stty -echo
function cleanup()
{
    tput smam   # restore wrapping
    tput cnorm  # cursor visible
    stty $tto   # restore stty echo
    printf "\n\n"
}
function winch()
{
    ttc=$(tput cols)   # get width of line in characters
    ((tnc=ttc-47))     # width available for the filename (see fmt_pgs)
    ((tn1=(tnc-3)/2))  # first part of filename
    ((tn2=tnc-3-tn1))  # second part of filename

    # format for progress and status lines
    fmt_pgs="%b%s %-${tnc}s %4s %6sMb %10s %4s/%4s %2s:%02d:%02d%b" 
    fmt_sta="\n${tcc_rev}%-$((ttc-11)).$((ttc-11))s%4d:%02d:%02d ${tcc_sgr}\r${tcc_cuu}"
    fmt_msg="%b%s [%-.$((ttc-4))s]%b" 
}
trap cleanup EXIT
trap winch WINCH
winch

# Display status line below the progress lines
function dispsta()
{
    local bws=$(cat "$dbup"/bw.txt)
    local tfs=$(cat "$dbup"/TotalSizeFile)
    local pgs=$(awk 'FNR==3 {x+=$1} END {print x}' "$dbup"/PROGRESS_DETAILS_*)

    ((pgs=pgs/1024/1024/1024))
    ((tfs=tfs/1024/1024/1024))
    txt="GPLv3 h:help q:quit +/-:change bw=$bws Tft=$pgs/${tfs}GB"

    # Wait for quota to become available
	if [[ -z "$qua_txt" ]] && [[ -f "$dbse"/.quota.txt ]]
	then
       	eval $(cat "$dbup"/../../.quota.txt)
        ((qua_tot=totalQuota/1024/1024/1024))
	    ((qua_usd=usedQuota/1024/1024/1024))
		((qua_nxt=(qua_usd+2)*1024*1024*1024-usedQuota))
		qua_txt=" Quota=${qua_usd}/${qua_tot}GB"
	fi
	if [[ "${#qua_txt}" -gt 4 ]]
	then
		txt+="$qua_txt"
		$ov && txt+="[$((qua_tft / 1024 / 1024))/$((qua_nxt / 1024 / 1024))Mb:${qua_sec}]"
	fi

    printf "$fmt_sta" "$txt" $((SECONDS/3600)) $((SECONDS%3600/60)) $((SECONDS%60))

    # Don't come back too soon
    chrono=$SECONDS
}

# Display messages above the progress lines
# usage: dismsg <fn> <msg>....
function dispmsg()
{
    local fn="$1"; shift
    local msg="$@"
    local i=${#oname[@]}

    # Shorten long messages
    if [[ ${#msg} -gt $((ttc-4)) ]]
    then
	  msg="${msg:0:$((ttc/2-3))}...${msg: -$(((ttc-7)/2))}"
    fi
    $od && [[ ${#msg} -gt $((ttc-4)) ]] && read -rsn1 -p "debug: #msg=${#msg} ttc=$ttc" x < $tty

    # Print above oldest running file
    pre="${tcc_sc}\n\n${tcc_cuu/1/$((i+1))}${tcc_il}"
    [[ $i -ge 1 ]] && pst="${tcc_el}\r${tcc_cud/1/$i}" || pst="${tcc_el}\r"

#dbg    printf "${pre}debug msg\r"
#dbg    read -rsn1  x < $tty
#dbg    pre=""

    printf "$fmt_msg" "${pre}" "$fn" "$msg" "${pst}"
}

# Show status line
dispsta

# Start following
[[ -z "$on" ]] || on="-n $on"
tail $on -F "$dbup"/output.txt_* 2>&1 |
while :
do
    read -t 0.2 x  # polling minimum every 0.2 seconds for a smooth clock on the status line :-)
    if ((SECONDS > chrono))
    then    
        # Handle interactive commands
        while read -rsn1 -t 0.001 key < $tty 2> /dev/null
        do
            case $key in
                "+")  
                    bwt=$(cat "$dbup"/bw.txt)
                    ((bwt=bwt+10))
                    ((bwt>100)) && bwt=100
                    echo -n $bwt > "$dbup"/bw.txt
                    iset BWTHROTTLE $bwt
                ;;
                "-")  
                    bwt=$(cat "$dbup"/bw.txt)
                    ((bwt=bwt-10))
                    ((bwt<10)) && bwt=10
                    echo -n $bwt > "$dbup"/bw.txt
                    iset BWTHROTTLE $bwt
                ;;
                "h")
                    # print usage below the status line
                    printf "\n\n"
                    usage
          
                    # compact array and restart display
                    for ((i=${#oname[@]}-1; i>=0; i--)) do [[ -z "${oname[$i]}" ]] && unset "oname[$i]"; done
                    printf "%.0s\n" "${!oname[@]}" # Print \n for every element in oname
                    dispsta
                ;;
                "u") getquota ;;
                "q") exit ;;
                *)
                ;;
            esac
        done

        # Update status line
        [[ $key == "u" ]] || getquota -l
        dispsta
    fi

    # Handle non progress-lines (not <item .../>)
    [[ -z "$x" ]] && continue
    [[ "${x:0:3}" == "==>" ]] && fn="${x##*.txt_}" && fn="${fn% <==}" && continue
    [[ "${x:0:5}" != "<item" ]] && dispmsg "$fn" "$x" && continue
    [[ "${x: -2}" != "/>" ]] && split="$x" && ($od && dispmsg 0 "split: $x" || : ) && continue
    [[ -n "$split" ]] && ($od && dispmsg 0 "split: $x" || : ) && x="$split$x" && split=""

    # import the values between <item ... />
    if ! eval ${x:6: -2} 2>&1 
    then
      $ov && dispmsg 0 "eval error on $x"
      continue
    fi

    # shorten the filename to fit the screen
    if ((${#fname} >= tnc))
    then
      sname="${fname:0:$tn1}...${fname: -$tn2}"
    else
      sname="$fname"
    fi

    # determine position of the fname
    ff=-1
    for ((i=0; i<${#oname[@]}; i++))
    do
      if [[ "$fname" == "${oname[$i]}" ]]
      then
        ff=$i
        if [[ $i -gt 0 ]]
        then
          pre="\r${tcc_cuu/1/$i}"
          pst="${tcc_el}\r${tcc_cud/1/$i}"
        else
          pre="\r"
          pst="${tcc_el}\r" 
        fi
      fi
    done

    # add new filename to array
    if [[ $ff -eq -1 ]]
    then
      ((ff=0))
      oname=("$fname" "${oname[@]:0:15}")
      pre="\n\n${tcc_cuu}${tcc_il}"
      pst="\r" 
      # dispsta

      #dbg printf "${pre}\radd ${#oname[@]} ${oname[@]}\r"
      #dbg read -rsn1 -t 100 x < $tty
      #dbg pre=""
    fi

#dbg  if $od && [[ "${oname[ff]}" != "$fname" ]]
#dbg  then
#dbg    printf "\rERROR\r"
#dbg    read -rsn1 -t 100 x < $tty
#dbg  fi

    # print
    rts="${remain_time}"
    rth="${rts%%:*}"        # remain_time hours
    rtm="${rts%:*}"
    rtm="${rtm#*:}"         # remain_time mins
    rts="${rts##*:}"        # remain_time secs
    printf  "$fmt_pgs" \
            "$pre" "$fn" "$sname" "$per" $((size/1024/1024)) \
            "$rate_trf" \
            $((tottrf_sz / 1024 / 1024)) $((tot_sz / 1024 / 1024)) \
            "$rth" "$rtm" "$rts" \
            "$pst" 

            #$((ff==0?bwt:0)) \
            #"$ff" "${#oname[@]}" \

    # reduce array upon completion
    if ((offset==size))
    then
        #dbg printf "\rdel $ff $offset==$size ${oname[@]}\r"
        #dbg read -rsn1 -t 100 x < $tty
  
        oname[$ff]=""
        ((ff==0)) && bwt=""
  
        if $od
        then
            ((i=ff)) 
            if [[ $i -gt 0 ]]
            then
                printf "\r\e[${i}A\e[2C%s\r\e[${i}B" " -$i"
            else
                printf "\r\e[2C%s\r" " -$i"
            fi
        fi
  
        while [[ ${#oname[@]} -gt 0 ]] && [[ -z "${oname[-1]}" ]] 
        do
            if $od
            then
                ((i=${#oname[@]}-1)) 
                if [[ $i -gt 0 ]]
                then
                    printf "\r\e[${i}A\e[2C%s\r\e[${i}B" "$i"
                else
                    printf "\r\e[2C%s\r" "$i"
                fi
            fi
            unset -v "oname[-1]"
        done
  
        # Update quota and status line 
        getquota -l $size && dispsta
    fi
done
